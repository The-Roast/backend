{"ast":null,"code":"var _toConsumableArray = require(\"/Users/michaelli/Desktop/the-roast/frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _regeneratorRuntime = require(\"/Users/michaelli/Desktop/the-roast/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/michaelli/Desktop/the-roast/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _slicedToArray = require(\"/Users/michaelli/Desktop/the-roast/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _objectSpread = require(\"/Users/michaelli/Desktop/the-roast/frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _objectWithoutProperties = require(\"/Users/michaelli/Desktop/the-roast/frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _excluded = [\"log\", \"logger\", \"progress\"];\nvar _require = require('./config'),\n  defaultArgs = _require.defaultArgs,\n  baseOptions = _require.baseOptions;\nvar parseArgs = require('./utils/parseArgs');\nvar _require2 = require('./node'),\n  defaultOptions = _require2.defaultOptions,\n  getCreateFFmpegCore = _require2.getCreateFFmpegCore;\nvar _require3 = require('../package.json'),\n  version = _require3.version;\nvar NO_LOAD = Error('ffmpeg.wasm is not ready, make sure you have completed load().');\nmodule.exports = function () {\n  var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _baseOptions$defaultO = _objectSpread(_objectSpread(_objectSpread({}, baseOptions), defaultOptions), _options),\n    optLog = _baseOptions$defaultO.log,\n    logger = _baseOptions$defaultO.logger,\n    optProgress = _baseOptions$defaultO.progress,\n    options = _objectWithoutProperties(_baseOptions$defaultO, _excluded);\n  var Core = null;\n  var ffmpeg = null;\n  var runResolve = null;\n  var runReject = null;\n  var running = false;\n  var customLogger = function customLogger() {};\n  var logging = optLog;\n  var progress = optProgress;\n  var duration = 0;\n  var frames = 0;\n  var readFrames = false;\n  var ratio = 0;\n  var detectCompletion = function detectCompletion(message) {\n    if (message === 'FFMPEG_END' && runResolve !== null) {\n      runResolve();\n      runResolve = null;\n      runReject = null;\n      running = false;\n    }\n  };\n  var log = function log(type, message) {\n    customLogger({\n      type: type,\n      message: message\n    });\n    if (logging) {\n      console.log(\"[\".concat(type, \"] \").concat(message));\n    }\n  };\n  var ts2sec = function ts2sec(ts) {\n    var _ts$split = ts.split(':'),\n      _ts$split2 = _slicedToArray(_ts$split, 3),\n      h = _ts$split2[0],\n      m = _ts$split2[1],\n      s = _ts$split2[2];\n    return parseFloat(h) * 60 * 60 + parseFloat(m) * 60 + parseFloat(s);\n  };\n  var parseProgress = function parseProgress(message, prog) {\n    if (typeof message === 'string') {\n      if (message.startsWith('  Duration')) {\n        var ts = message.split(', ')[0].split(': ')[1];\n        var d = ts2sec(ts);\n        prog({\n          duration: d,\n          ratio: ratio\n        });\n        if (duration === 0 || duration > d) {\n          duration = d;\n          readFrames = true;\n        }\n      } else if (readFrames && message.startsWith('    Stream')) {\n        var match = message.match(/([\\d.]+) fps/);\n        if (match) {\n          var fps = parseFloat(match[1]);\n          frames = duration * fps;\n        } else {\n          frames = 0;\n        }\n        readFrames = false;\n      } else if (message.startsWith('frame') || message.startsWith('size')) {\n        var _ts = message.split('time=')[1].split(' ')[0];\n        var t = ts2sec(_ts);\n        var _match = message.match(/frame=\\s*(\\d+)/);\n        if (frames && _match) {\n          var f = parseFloat(_match[1]);\n          ratio = Math.min(f / frames, 1);\n        } else {\n          ratio = t / duration;\n        }\n        prog({\n          ratio: ratio,\n          time: t\n        });\n      } else if (message.startsWith('video:')) {\n        prog({\n          ratio: 1\n        });\n        duration = 0;\n      }\n    }\n  };\n  var parseMessage = function parseMessage(_ref) {\n    var type = _ref.type,\n      message = _ref.message;\n    log(type, message);\n    parseProgress(message, progress);\n    detectCompletion(message);\n  };\n\n  /*\n   * Load ffmpeg.wasm-core script.\n   * In browser environment, the ffmpeg.wasm-core script is fetch from\n   * CDN and can be assign to a local path by assigning `corePath`.\n   * In node environment, we use dynamic require and the default `corePath`\n   * is `$ffmpeg/core`.\n   *\n   * Typically the load() func might take few seconds to minutes to complete,\n   * better to do it as early as possible.\n   *\n   */\n  var load = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _yield$getCreateFFmpe, createFFmpegCore, corePath, workerPath, wasmPath;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            log('info', 'load ffmpeg-core');\n            if (!(Core === null)) {\n              _context.next = 17;\n              break;\n            }\n            log('info', 'loading ffmpeg-core');\n            /*\n             * In node environment, all paths are undefined as there\n             * is no need to set them.\n             */\n            _context.next = 5;\n            return getCreateFFmpegCore(options);\n          case 5:\n            _yield$getCreateFFmpe = _context.sent;\n            createFFmpegCore = _yield$getCreateFFmpe.createFFmpegCore;\n            corePath = _yield$getCreateFFmpe.corePath;\n            workerPath = _yield$getCreateFFmpe.workerPath;\n            wasmPath = _yield$getCreateFFmpe.wasmPath;\n            _context.next = 12;\n            return createFFmpegCore({\n              /*\n               * Assign mainScriptUrlOrBlob fixes chrome extension web worker issue\n               * as there is no document.currentScript in the context of content_scripts\n               */\n              mainScriptUrlOrBlob: corePath,\n              printErr: function printErr(message) {\n                return parseMessage({\n                  type: 'fferr',\n                  message: message\n                });\n              },\n              print: function print(message) {\n                return parseMessage({\n                  type: 'ffout',\n                  message: message\n                });\n              },\n              /*\n               * locateFile overrides paths of files that is loaded by main script (ffmpeg-core.js).\n               * It is critical for browser environment and we override both wasm and worker paths\n               * as we are using blob URL instead of original URL to avoid cross origin issues.\n               */\n              locateFile: function locateFile(path, prefix) {\n                if (typeof window !== 'undefined' || typeof WorkerGlobalScope !== 'undefined') {\n                  if (typeof wasmPath !== 'undefined' && path.endsWith('ffmpeg-core.wasm')) {\n                    return wasmPath;\n                  }\n                  if (typeof workerPath !== 'undefined' && path.endsWith('ffmpeg-core.worker.js')) {\n                    return workerPath;\n                  }\n                }\n                return prefix + path;\n              }\n            });\n          case 12:\n            Core = _context.sent;\n            ffmpeg = Core.cwrap(options.mainName || 'proxy_main', 'number', ['number', 'number']);\n            log('info', 'ffmpeg-core loaded');\n            _context.next = 18;\n            break;\n          case 17:\n            throw Error('ffmpeg.wasm was loaded, you should not load it again, use ffmpeg.isLoaded() to check next time.');\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function load() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  /*\n   * Determine whether the Core is loaded.\n   */\n  var isLoaded = function isLoaded() {\n    return Core !== null;\n  };\n\n  /*\n   * Run ffmpeg command.\n   * This is the major function in ffmpeg.wasm, you can just imagine it\n   * as ffmpeg native cli and what you need to pass is the same.\n   *\n   * For example, you can convert native command below:\n   *\n   * ```\n   * $ ffmpeg -i video.avi -c:v libx264 video.mp4\n   * ```\n   *\n   * To\n   *\n   * ```\n   * await ffmpeg.run('-i', 'video.avi', '-c:v', 'libx264', 'video.mp4');\n   * ```\n   *\n   */\n  var run = function run() {\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n    log('info', \"run ffmpeg command: \".concat(_args.join(' ')));\n    if (Core === null) {\n      throw NO_LOAD;\n    } else if (running) {\n      throw Error('ffmpeg.wasm can only run one command at a time');\n    } else {\n      running = true;\n      return new Promise(function (resolve, reject) {\n        var args = [].concat(_toConsumableArray(defaultArgs), _args).filter(function (s) {\n          return s.length !== 0;\n        });\n        runResolve = resolve;\n        runReject = reject;\n        ffmpeg.apply(void 0, _toConsumableArray(parseArgs(Core, args)));\n      });\n    }\n  };\n\n  /*\n   * Run FS operations.\n   * For input/output file of ffmpeg.wasm, it is required to save them to MEMFS\n   * first so that ffmpeg.wasm is able to consume them. Here we rely on the FS\n   * methods provided by Emscripten.\n   *\n   * Common methods to use are:\n   * ffmpeg.FS('writeFile', 'video.avi', new Uint8Array(...)): writeFile writes\n   * data to MEMFS. You need to use Uint8Array for binary data.\n   * ffmpeg.FS('readFile', 'video.mp4'): readFile from MEMFS.\n   * ffmpeg.FS('unlink', 'video.map'): delete file from MEMFS.\n   *\n   * For more info, check https://emscripten.org/docs/api_reference/Filesystem-API.html\n   *\n   */\n  var FS = function FS(method) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    log('info', \"run FS.\".concat(method, \" \").concat(args.map(function (arg) {\n      return typeof arg === 'string' ? arg : \"<\".concat(arg.length, \" bytes binary file>\");\n    }).join(' ')));\n    if (Core === null) {\n      throw NO_LOAD;\n    } else {\n      var ret = null;\n      try {\n        var _Core$FS;\n        ret = (_Core$FS = Core.FS)[method].apply(_Core$FS, args);\n      } catch (e) {\n        if (method === 'readdir') {\n          throw Error(\"ffmpeg.FS('readdir', '\".concat(args[0], \"') error. Check if the path exists, ex: ffmpeg.FS('readdir', '/')\"));\n        } else if (method === 'readFile') {\n          throw Error(\"ffmpeg.FS('readFile', '\".concat(args[0], \"') error. Check if the path exists\"));\n        } else {\n          throw Error('Oops, something went wrong in FS operation.');\n        }\n      }\n      return ret;\n    }\n  };\n\n  /**\n   * forcibly terminate the ffmpeg program.\n   */\n  var exit = function exit() {\n    if (Core === null) {\n      throw NO_LOAD;\n    } else {\n      // if there's any pending runs, reject them\n      if (runReject) {\n        runReject('ffmpeg has exited');\n      }\n      running = false;\n      try {\n        Core.exit(1);\n      } catch (err) {\n        log(err.message);\n        if (runReject) {\n          runReject(err);\n        }\n      } finally {\n        Core = null;\n        ffmpeg = null;\n        runResolve = null;\n        runReject = null;\n      }\n    }\n  };\n  var setProgress = function setProgress(_progress) {\n    progress = _progress;\n  };\n  var setLogger = function setLogger(_logger) {\n    customLogger = _logger;\n  };\n  var setLogging = function setLogging(_logging) {\n    logging = _logging;\n  };\n  log('info', \"use ffmpeg.wasm v\".concat(version));\n  return {\n    setProgress: setProgress,\n    setLogger: setLogger,\n    setLogging: setLogging,\n    load: load,\n    isLoaded: isLoaded,\n    run: run,\n    exit: exit,\n    FS: FS\n  };\n};","map":{"version":3,"names":["_require","require","defaultArgs","baseOptions","parseArgs","_require2","defaultOptions","getCreateFFmpegCore","_require3","version","NO_LOAD","Error","module","exports","_options","arguments","length","undefined","_baseOptions$defaultO","_objectSpread","optLog","log","logger","optProgress","progress","options","_objectWithoutProperties","_excluded","Core","ffmpeg","runResolve","runReject","running","customLogger","logging","duration","frames","readFrames","ratio","detectCompletion","message","type","console","concat","ts2sec","ts","_ts$split","split","_ts$split2","_slicedToArray","h","m","s","parseFloat","parseProgress","prog","startsWith","d","match","fps","t","f","Math","min","time","parseMessage","_ref","load","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$getCreateFFmpe","createFFmpegCore","corePath","workerPath","wasmPath","wrap","_callee$","_context","prev","next","sent","mainScriptUrlOrBlob","printErr","print","locateFile","path","prefix","window","WorkerGlobalScope","endsWith","cwrap","mainName","stop","apply","isLoaded","run","_len","_args","Array","_key","join","Promise","resolve","reject","args","_toConsumableArray","filter","FS","method","_len2","_key2","map","arg","ret","_Core$FS","e","exit","err","setProgress","_progress","setLogger","_logger","setLogging","_logging"],"sources":["/Users/michaelli/Desktop/the-roast/frontend/node_modules/@ffmpeg/ffmpeg/src/createFFmpeg.js"],"sourcesContent":["const { defaultArgs, baseOptions } = require('./config');\nconst parseArgs = require('./utils/parseArgs');\nconst { defaultOptions, getCreateFFmpegCore } = require('./node');\nconst { version } = require('../package.json');\n\nconst NO_LOAD = Error('ffmpeg.wasm is not ready, make sure you have completed load().');\n\nmodule.exports = (_options = {}) => {\n  const {\n    log: optLog,\n    logger,\n    progress: optProgress,\n    ...options\n  } = {\n    ...baseOptions,\n    ...defaultOptions,\n    ..._options,\n  };\n  let Core = null;\n  let ffmpeg = null;\n  let runResolve = null;\n  let runReject = null;\n  let running = false;\n  let customLogger = () => {};\n  let logging = optLog;\n  let progress = optProgress;\n  let duration = 0;\n  let frames = 0;\n  let readFrames = false;\n  let ratio = 0;\n\n  const detectCompletion = (message) => {\n    if (message === 'FFMPEG_END' && runResolve !== null) {\n      runResolve();\n      runResolve = null;\n      runReject = null;\n      running = false;\n    }\n  };\n  const log = (type, message) => {\n    customLogger({ type, message });\n    if (logging) {\n      console.log(`[${type}] ${message}`);\n    }\n  };\n  const ts2sec = (ts) => {\n    const [h, m, s] = ts.split(':');\n    return (parseFloat(h) * 60 * 60) + (parseFloat(m) * 60) + parseFloat(s);\n  };\n  const parseProgress = (message, prog) => {\n    if (typeof message === 'string') {\n      if (message.startsWith('  Duration')) {\n        const ts = message.split(', ')[0].split(': ')[1];\n        const d = ts2sec(ts);\n        prog({ duration: d, ratio });\n        if (duration === 0 || duration > d) {\n          duration = d;\n          readFrames = true;\n        }\n      } else if (readFrames && message.startsWith('    Stream')) {\n        const match = message.match(/([\\d.]+) fps/);\n        if (match) {\n          const fps = parseFloat(match[1]);\n          frames = duration * fps;\n        } else {\n          frames = 0;\n        }\n        readFrames = false;\n      } else if (message.startsWith('frame') || message.startsWith('size')) {\n        const ts = message.split('time=')[1].split(' ')[0];\n        const t = ts2sec(ts);\n        const match = message.match(/frame=\\s*(\\d+)/);\n        if (frames && match) {\n          const f = parseFloat(match[1]);\n          ratio = Math.min(f / frames, 1);\n        } else {\n          ratio = t / duration;\n        }\n        prog({ ratio, time: t });\n      } else if (message.startsWith('video:')) {\n        prog({ ratio: 1 });\n        duration = 0;\n      }\n    }\n  };\n  const parseMessage = ({ type, message }) => {\n    log(type, message);\n    parseProgress(message, progress);\n    detectCompletion(message);\n  };\n\n  /*\n   * Load ffmpeg.wasm-core script.\n   * In browser environment, the ffmpeg.wasm-core script is fetch from\n   * CDN and can be assign to a local path by assigning `corePath`.\n   * In node environment, we use dynamic require and the default `corePath`\n   * is `$ffmpeg/core`.\n   *\n   * Typically the load() func might take few seconds to minutes to complete,\n   * better to do it as early as possible.\n   *\n   */\n  const load = async () => {\n    log('info', 'load ffmpeg-core');\n    if (Core === null) {\n      log('info', 'loading ffmpeg-core');\n      /*\n       * In node environment, all paths are undefined as there\n       * is no need to set them.\n       */\n      const {\n        createFFmpegCore,\n        corePath,\n        workerPath,\n        wasmPath,\n      } = await getCreateFFmpegCore(options);\n      Core = await createFFmpegCore({\n        /*\n         * Assign mainScriptUrlOrBlob fixes chrome extension web worker issue\n         * as there is no document.currentScript in the context of content_scripts\n         */\n        mainScriptUrlOrBlob: corePath,\n        printErr: (message) => parseMessage({ type: 'fferr', message }),\n        print: (message) => parseMessage({ type: 'ffout', message }),\n        /*\n         * locateFile overrides paths of files that is loaded by main script (ffmpeg-core.js).\n         * It is critical for browser environment and we override both wasm and worker paths\n         * as we are using blob URL instead of original URL to avoid cross origin issues.\n         */\n        locateFile: (path, prefix) => {\n          if (typeof window !== 'undefined' || typeof WorkerGlobalScope !== 'undefined') {\n            if (typeof wasmPath !== 'undefined'\n              && path.endsWith('ffmpeg-core.wasm')) {\n              return wasmPath;\n            }\n            if (typeof workerPath !== 'undefined'\n              && path.endsWith('ffmpeg-core.worker.js')) {\n              return workerPath;\n            }\n          }\n          return prefix + path;\n        },\n      });\n      ffmpeg = Core.cwrap(options.mainName || 'proxy_main', 'number', ['number', 'number']);\n      log('info', 'ffmpeg-core loaded');\n    } else {\n      throw Error('ffmpeg.wasm was loaded, you should not load it again, use ffmpeg.isLoaded() to check next time.');\n    }\n  };\n\n  /*\n   * Determine whether the Core is loaded.\n   */\n  const isLoaded = () => Core !== null;\n\n  /*\n   * Run ffmpeg command.\n   * This is the major function in ffmpeg.wasm, you can just imagine it\n   * as ffmpeg native cli and what you need to pass is the same.\n   *\n   * For example, you can convert native command below:\n   *\n   * ```\n   * $ ffmpeg -i video.avi -c:v libx264 video.mp4\n   * ```\n   *\n   * To\n   *\n   * ```\n   * await ffmpeg.run('-i', 'video.avi', '-c:v', 'libx264', 'video.mp4');\n   * ```\n   *\n   */\n  const run = (..._args) => {\n    log('info', `run ffmpeg command: ${_args.join(' ')}`);\n    if (Core === null) {\n      throw NO_LOAD;\n    } else if (running) {\n      throw Error('ffmpeg.wasm can only run one command at a time');\n    } else {\n      running = true;\n      return new Promise((resolve, reject) => {\n        const args = [...defaultArgs, ..._args].filter((s) => s.length !== 0);\n        runResolve = resolve;\n        runReject = reject;\n        ffmpeg(...parseArgs(Core, args));\n      });\n    }\n  };\n\n  /*\n   * Run FS operations.\n   * For input/output file of ffmpeg.wasm, it is required to save them to MEMFS\n   * first so that ffmpeg.wasm is able to consume them. Here we rely on the FS\n   * methods provided by Emscripten.\n   *\n   * Common methods to use are:\n   * ffmpeg.FS('writeFile', 'video.avi', new Uint8Array(...)): writeFile writes\n   * data to MEMFS. You need to use Uint8Array for binary data.\n   * ffmpeg.FS('readFile', 'video.mp4'): readFile from MEMFS.\n   * ffmpeg.FS('unlink', 'video.map'): delete file from MEMFS.\n   *\n   * For more info, check https://emscripten.org/docs/api_reference/Filesystem-API.html\n   *\n   */\n  const FS = (method, ...args) => {\n    log('info', `run FS.${method} ${args.map((arg) => (typeof arg === 'string' ? arg : `<${arg.length} bytes binary file>`)).join(' ')}`);\n    if (Core === null) {\n      throw NO_LOAD;\n    } else {\n      let ret = null;\n      try {\n        ret = Core.FS[method](...args);\n      } catch (e) {\n        if (method === 'readdir') {\n          throw Error(`ffmpeg.FS('readdir', '${args[0]}') error. Check if the path exists, ex: ffmpeg.FS('readdir', '/')`);\n        } else if (method === 'readFile') {\n          throw Error(`ffmpeg.FS('readFile', '${args[0]}') error. Check if the path exists`);\n        } else {\n          throw Error('Oops, something went wrong in FS operation.');\n        }\n      }\n      return ret;\n    }\n  };\n\n  /**\n   * forcibly terminate the ffmpeg program.\n   */\n  const exit = () => {\n    if (Core === null) {\n      throw NO_LOAD;\n    } else {\n      // if there's any pending runs, reject them\n      if (runReject) {\n        runReject('ffmpeg has exited');\n      }\n      running = false;\n      try {\n        Core.exit(1);\n      } catch (err) {\n        log(err.message);\n        if (runReject) {\n          runReject(err);\n        }\n      } finally {\n        Core = null;\n        ffmpeg = null;\n        runResolve = null;\n        runReject = null;\n      }\n    }\n  };\n\n  const setProgress = (_progress) => {\n    progress = _progress;\n  };\n\n  const setLogger = (_logger) => {\n    customLogger = _logger;\n  };\n\n  const setLogging = (_logging) => {\n    logging = _logging;\n  };\n\n  log('info', `use ffmpeg.wasm v${version}`);\n\n  return {\n    setProgress,\n    setLogger,\n    setLogging,\n    load,\n    isLoaded,\n    run,\n    exit,\n    FS,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}