{"ast":null,"code":"var _jsxFileName = \"/Users/michaelli/Desktop/the-roast/frontend/src/Pages/Conversation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useWhisper } from \"@chengsokdara/use-whisper\";\nimport \"./styles/Conversation.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Conversation(_ref) {\n  _s();\n  let {\n    setIsSignedIn\n  } = _ref;\n  const [isRecording, setIsRecording] = useState(false);\n  const [showResponse, setShowResponse] = useState(false);\n  const [response, setResponse] = useState(\"\");\n  const [transcriptWords, setTranscriptWords] = useState([]);\n  const {\n    startRecording,\n    stopRecording,\n    transcript\n  } = useWhisper({\n    apiKey: \"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\"\n  });\n  useEffect(() => {\n    if (isRecording) {\n      startRecording();\n    } else {\n      stopRecording();\n      setShowResponse(true);\n      queryGPT();\n    }\n  }, [isRecording]);\n  const queryGPT = async () => {\n    // Perform the GPT query and set the response\n    const response = await performGPTQuery(transcript.text);\n    setResponse(response);\n  };\n  const performGPTQuery = async text => {\n    // Make the API call to GPT and return the response\n    // You'll need to implement this part based on your chosen method for querying GPT\n    return \"This is a sample response from GPT.\";\n  };\n  const startRecordingHandler = () => {\n    setIsRecording(true);\n    setShowResponse(false);\n    setTranscriptWords([]);\n  };\n  const stopRecordingHandler = () => {\n    setIsRecording(false);\n  };\n  const renderTranscriptWords = () => {\n    return transcriptWords.map((word, index) => /*#__PURE__*/_jsxDEV(CSSTransition, {\n      timeout: 300,\n      classNames: \"word\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this));\n  };\n  useEffect(() => {\n    if (transcript.text) {\n      const words = transcript.text.split(\" \");\n      setTranscriptWords(words);\n    }\n  }, [transcript.text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conversation-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-view\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-view\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [showResponse ? /*#__PURE__*/_jsxDEV(TransitionGroup, {\n          component: \"div\",\n          className: \"response-container\",\n          children: renderTranscriptWords()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Transcribed Text: \", transcript.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startRecordingHandler,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopRecordingHandler,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 6\n        }, this), showResponse && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Response: \", response]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n}\n_s(Conversation, \"VQW9vEwVj7Z3p/He9clXpwM/SZM=\", false, function () {\n  return [useWhisper];\n});\n_c = Conversation;\nexport default Conversation;\nvar _c;\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"names":["React","useState","useEffect","useWhisper","CSSTransition","TransitionGroup","jsxDEV","_jsxDEV","Conversation","_ref","_s","setIsSignedIn","isRecording","setIsRecording","showResponse","setShowResponse","response","setResponse","transcriptWords","setTranscriptWords","startRecording","stopRecording","transcript","apiKey","queryGPT","performGPTQuery","text","startRecordingHandler","stopRecordingHandler","renderTranscriptWords","map","word","index","timeout","classNames","children","fileName","_jsxFileName","lineNumber","columnNumber","words","split","className","component","onClick","_c","$RefreshReg$"],"sources":["/Users/michaelli/Desktop/the-roast/frontend/src/Pages/Conversation.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useWhisper } from \"@chengsokdara/use-whisper\";\nimport \"./styles/Conversation.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nfunction Conversation({ setIsSignedIn }) {\n\tconst [isRecording, setIsRecording] = useState(false);\n\tconst [showResponse, setShowResponse] = useState(false);\n\tconst [response, setResponse] = useState(\"\");\n\tconst [transcriptWords, setTranscriptWords] = useState([]);\n\n\tconst { startRecording, stopRecording, transcript } = useWhisper({\n\t\tapiKey: \"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\",\n\t});\n\n\tuseEffect(() => {\n\t\tif (isRecording) {\n\t\t\tstartRecording();\n\t\t} else {\n\t\t\tstopRecording();\n\t\t\tsetShowResponse(true);\n\t\t\tqueryGPT();\n\t\t}\n\t}, [isRecording]);\n\n\tconst queryGPT = async () => {\n\t\t// Perform the GPT query and set the response\n\t\tconst response = await performGPTQuery(transcript.text);\n\t\tsetResponse(response);\n\t};\n\n\tconst performGPTQuery = async (text) => {\n\t\t// Make the API call to GPT and return the response\n\t\t// You'll need to implement this part based on your chosen method for querying GPT\n\t\treturn \"This is a sample response from GPT.\";\n\t};\n\n\tconst startRecordingHandler = () => {\n\t\tsetIsRecording(true);\n\t\tsetShowResponse(false);\n\t\tsetTranscriptWords([]);\n\t};\n\n\tconst stopRecordingHandler = () => {\n\t\tsetIsRecording(false);\n\t};\n\n\tconst renderTranscriptWords = () => {\n\t\treturn transcriptWords.map((word, index) => (\n\t\t\t<CSSTransition key={index} timeout={300} classNames=\"word\">\n\t\t\t\t<span>{word}</span>\n\t\t\t</CSSTransition>\n\t\t));\n\t};\n\n\tuseEffect(() => {\n\t\tif (transcript.text) {\n\t\t\tconst words = transcript.text.split(\" \");\n\t\t\tsetTranscriptWords(words);\n\t\t}\n\t}, [transcript.text]);\n\n\treturn (\n\t\t<div className=\"conversation-wrapper\">\n\t\t\t<div className=\"left-view\">{/* Existing content */}</div>\n\t\t\t<div className=\"right-view\">\n\t\t\t\t<div>\n\t\t\t\t\t{showResponse ? (\n\t\t\t\t\t\t<TransitionGroup component=\"div\" className=\"response-container\">\n\t\t\t\t\t\t\t{renderTranscriptWords()}\n\t\t\t\t\t\t</TransitionGroup>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p>Transcribed Text: {transcript.text}</p>\n\t\t\t\t\t)}\n\t\t\t\t\t<button onClick={startRecordingHandler}>Start</button>\n\t\t\t\t\t<button onClick={stopRecordingHandler}>Stop</button>\n\t\t\t\t\t{showResponse && <p>Response: {response}</p>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Conversation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}