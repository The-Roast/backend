{"ast":null,"code":"/* eslint-disable no-undef */\nimport { log } from '../utils/log';\nimport { CREATE_FFMPEG_CORE_IS_NOT_DEFINED } from '../utils/errors';\n\n/*\n * Fetch data from remote URL and convert to blob URL\n * to avoid CORS issue\n */\nconst toBlobURL = async (url, mimeType) => {\n  log('info', `fetch ${url}`);\n  const buf = await (await fetch(url)).arrayBuffer();\n  log('info', `${url} file size = ${buf.byteLength} bytes`);\n  const blob = new Blob([buf], {\n    type: mimeType\n  });\n  const blobURL = URL.createObjectURL(blob);\n  log('info', `${url} blob URL = ${blobURL}`);\n  return blobURL;\n};\n\n// eslint-disable-next-line\nexport const getCreateFFmpegCore = async _ref => {\n  let {\n    corePath: _corePath,\n    workerPath: _workerPath,\n    wasmPath: _wasmPath\n  } = _ref;\n  // in Web Worker context\n  // eslint-disable-next-line\n  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n    if (typeof _corePath !== 'string') {\n      throw Error('corePath should be a string!');\n    }\n    const coreRemotePath = new URL(_corePath, import.meta.url).href;\n    const corePath = await toBlobURL(coreRemotePath, 'application/javascript');\n    const wasmPath = await toBlobURL(_wasmPath !== undefined ? _wasmPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'), 'application/wasm');\n    const workerPath = await toBlobURL(_workerPath !== undefined ? _workerPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'), 'application/javascript');\n    if (typeof createFFmpegCore === 'undefined') {\n      return new Promise(resolve => {\n        globalThis.importScripts(corePath);\n        if (typeof createFFmpegCore === 'undefined') {\n          throw Error(CREATE_FFMPEG_CORE_IS_NOT_DEFINED(coreRemotePath));\n        }\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath\n        });\n      });\n    }\n    log('info', 'ffmpeg-core.js script is loaded already');\n    return Promise.resolve({\n      createFFmpegCore,\n      corePath,\n      wasmPath,\n      workerPath\n    });\n  }\n  if (typeof _corePath !== 'string') {\n    throw Error('corePath should be a string!');\n  }\n  const coreRemotePath = new URL(_corePath, import.meta.url).href;\n  const corePath = await toBlobURL(coreRemotePath, 'application/javascript');\n  const wasmPath = await toBlobURL(_wasmPath !== undefined ? _wasmPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'), 'application/wasm');\n  const workerPath = await toBlobURL(_workerPath !== undefined ? _workerPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'), 'application/javascript');\n  if (typeof createFFmpegCore === 'undefined') {\n    return new Promise(resolve => {\n      const script = document.createElement('script');\n      const eventHandler = () => {\n        script.removeEventListener('load', eventHandler);\n        if (typeof createFFmpegCore === 'undefined') {\n          throw Error(CREATE_FFMPEG_CORE_IS_NOT_DEFINED(coreRemotePath));\n        }\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath\n        });\n      };\n      script.src = corePath;\n      script.type = 'text/javascript';\n      script.addEventListener('load', eventHandler);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n  log('info', 'ffmpeg-core.js script is loaded already');\n  return Promise.resolve({\n    createFFmpegCore,\n    corePath,\n    wasmPath,\n    workerPath\n  });\n};","map":{"version":3,"names":["log","CREATE_FFMPEG_CORE_IS_NOT_DEFINED","toBlobURL","url","mimeType","buf","fetch","arrayBuffer","byteLength","blob","Blob","type","blobURL","URL","createObjectURL","getCreateFFmpegCore","_ref","corePath","_corePath","workerPath","_workerPath","wasmPath","_wasmPath","WorkerGlobalScope","self","Error","coreRemotePath","import","meta","href","undefined","replace","createFFmpegCore","Promise","resolve","globalThis","importScripts","script","document","createElement","eventHandler","removeEventListener","src","addEventListener","getElementsByTagName","appendChild"],"sources":["/Users/michaelli/Desktop/the-roast/frontend/node_modules/@ffmpeg/ffmpeg/src/browser/getCreateFFmpegCore.js"],"sourcesContent":["/* eslint-disable no-undef */\nimport { log } from '../utils/log';\nimport {\n  CREATE_FFMPEG_CORE_IS_NOT_DEFINED,\n} from '../utils/errors';\n\n/*\n * Fetch data from remote URL and convert to blob URL\n * to avoid CORS issue\n */\nconst toBlobURL = async (url, mimeType) => {\n  log('info', `fetch ${url}`);\n  const buf = await (await fetch(url)).arrayBuffer();\n  log('info', `${url} file size = ${buf.byteLength} bytes`);\n  const blob = new Blob([buf], { type: mimeType });\n  const blobURL = URL.createObjectURL(blob);\n  log('info', `${url} blob URL = ${blobURL}`);\n  return blobURL;\n};\n\n// eslint-disable-next-line\nexport const getCreateFFmpegCore = async ({\n  corePath: _corePath,\n  workerPath: _workerPath,\n  wasmPath: _wasmPath,\n}) => {\n  // in Web Worker context\n  // eslint-disable-next-line\n  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n    if (typeof _corePath !== 'string') {\n      throw Error('corePath should be a string!');\n    }\n    const coreRemotePath = new URL(_corePath, import.meta.url).href;\n    const corePath = await toBlobURL(\n      coreRemotePath,\n      'application/javascript',\n    );\n    const wasmPath = await toBlobURL(\n      _wasmPath !== undefined ? _wasmPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'),\n      'application/wasm',\n    );\n    const workerPath = await toBlobURL(\n      _workerPath !== undefined ? _workerPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'),\n      'application/javascript',\n    );\n    if (typeof createFFmpegCore === 'undefined') {\n      return new Promise((resolve) => {\n        globalThis.importScripts(corePath);\n        if (typeof createFFmpegCore === 'undefined') {\n          throw Error(CREATE_FFMPEG_CORE_IS_NOT_DEFINED(coreRemotePath));\n        }\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath,\n        });\n      });\n    }\n    log('info', 'ffmpeg-core.js script is loaded already');\n    return Promise.resolve({\n      createFFmpegCore,\n      corePath,\n      wasmPath,\n      workerPath,\n    });\n  }\n  if (typeof _corePath !== 'string') {\n    throw Error('corePath should be a string!');\n  }\n  const coreRemotePath = new URL(_corePath, import.meta.url).href;\n  const corePath = await toBlobURL(\n    coreRemotePath,\n    'application/javascript',\n  );\n  const wasmPath = await toBlobURL(\n    _wasmPath !== undefined ? _wasmPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'),\n    'application/wasm',\n  );\n  const workerPath = await toBlobURL(\n    _workerPath !== undefined ? _workerPath : coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'),\n    'application/javascript',\n  );\n  if (typeof createFFmpegCore === 'undefined') {\n    return new Promise((resolve) => {\n      const script = document.createElement('script');\n      const eventHandler = () => {\n        script.removeEventListener('load', eventHandler);\n        if (typeof createFFmpegCore === 'undefined') {\n          throw Error(CREATE_FFMPEG_CORE_IS_NOT_DEFINED(coreRemotePath));\n        }\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath,\n        });\n      };\n      script.src = corePath;\n      script.type = 'text/javascript';\n      script.addEventListener('load', eventHandler);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n  log('info', 'ffmpeg-core.js script is loaded already');\n  return Promise.resolve({\n    createFFmpegCore,\n    corePath,\n    wasmPath,\n    workerPath,\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}